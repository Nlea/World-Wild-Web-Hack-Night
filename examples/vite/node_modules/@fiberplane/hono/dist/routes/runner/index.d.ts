import { type Env } from "hono";
import type { ExecutionErrorInformation, FiberplaneAppType } from "../../types.js";
export type ErrorDetails = Omit<ExecutionErrorInformation["payload"], "body"> & {
    body?: unknown;
};
export default function createRunnerRoute<E extends Env>(apiKey: string, fiberplaneServicesUrl: string): import("hono/hono-base").HonoBase<E & FiberplaneAppType<E>, {
    "/:workflowId": {
        $post: {
            input: {
                param: {
                    workflowId: string;
                };
            };
            output: {
                error: string;
            };
            outputFormat: "json";
            status: 400;
        } | {
            input: {
                param: {
                    workflowId: string;
                };
            };
            output: {
                type: "VALIDATION_ERROR";
                message: string;
                payload: {
                    key: string;
                    message: string;
                    code: string;
                }[];
            };
            outputFormat: "json";
            status: 400;
        } | {
            input: {
                param: {
                    workflowId: string;
                };
            };
            output: {
                type: string;
                message: string;
            };
            outputFormat: "json";
            status: 500;
        } | {
            input: {
                param: {
                    workflowId: string;
                };
            };
            output: {
                type: "EXECUTION_ERROR";
                message: string;
                payload: {
                    stepId: string;
                    parameters?: {
                        [x: string]: never;
                    } | undefined;
                    request?: {
                        url: string;
                        method: string;
                        headers: {
                            [x: string]: string;
                        };
                        body?: string | undefined;
                    } | undefined;
                    response?: {
                        status: number;
                        body?: string | undefined;
                        headers: {
                            [x: string]: string;
                        };
                    } | undefined;
                };
            };
            outputFormat: "json";
            status: 100 | 102 | 103 | 200 | 201 | 202 | 203 | 206 | 207 | 208 | 226 | 300 | 301 | 302 | 303 | 305 | 306 | 307 | 308 | 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 421 | 422 | 423 | 424 | 425 | 426 | 428 | 429 | 431 | 451 | 500 | 501 | 502 | 503 | 504 | 505 | 506 | 507 | 508 | 510 | 511 | -1;
        };
    };
}, "/">;
