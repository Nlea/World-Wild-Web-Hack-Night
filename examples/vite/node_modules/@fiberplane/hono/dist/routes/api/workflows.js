import { Hono } from "hono";
import { logIfDebug } from "../../debug.js";
export default function createWorkflowsApiRoute(apiKey, fetchFn, fiberplaneServicesUrl) {
    const app = new Hono();
    // Proxy all requests to fp-services but attach a token
    app.all("*", async (c) => {
        const url = `${fiberplaneServicesUrl}${c.req.path}`;
        const contentType = c.req.header("content-type");
        const partitionKey = c.req.header("X-Fiberplane-Partition-Key");
        logIfDebug(c, "[workflows]", `- ${c.req.method} ${c.req.path} -`, "Proxying request to: ", url);
        const headers = new Headers();
        // Only include the bare minimum authentication and content-type headers
        headers.set("Authorization", `Bearer ${apiKey}`);
        if (contentType) {
            logIfDebug(c, "[workflows]", `- ${c.req.method} ${c.req.path} -`, "content type attached to proxied request:", contentType);
            headers.set("content-type", contentType);
        }
        if (partitionKey) {
            headers.set("X-Fiberplane-Partition-Key", partitionKey);
            logIfDebug(c, "[workflows]", `- ${c.req.method} ${c.req.path} -`, "partition key attached to proxied request:", partitionKey);
        }
        const result = fetchFn(url, {
            method: c.req.method,
            headers,
            body: c.req.raw.body,
        });
        return result;
    });
    return app;
}
