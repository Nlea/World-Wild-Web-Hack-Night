import { AsyncLocalStorage } from "node:async_hooks";
// Create our polyfill implementation using AsyncLocalStorage
const asyncLocalStorage = new AsyncLocalStorage();
/**
 * Polyfill for Hono's contextStorage middleware
 */
const polyfillContextStorage = () => {
    return async function contextStorage(c, next) {
        await asyncLocalStorage.run(c, next);
    };
};
/**
 * Polyfill for Hono's getContext function
 */
const polyfillGetContext = () => {
    const context = asyncLocalStorage.getStore();
    if (!context) {
        throw new Error("Context is not available");
    }
    return context;
};
// Default to using the polyfill
let contextStorage = polyfillContextStorage;
let getContext = polyfillGetContext;
// Try to import from the official Hono package
// We use dynamic import to avoid errors if the module doesn't exist
import("hono/context-storage")
    .then((honoContextStorage) => {
    // If we get here, the module exists, so we can use it
    contextStorage = honoContextStorage.contextStorage;
    getContext = honoContextStorage.getContext;
})
    .catch(() => { });
export { contextStorage, getContext };
